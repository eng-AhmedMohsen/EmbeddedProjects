
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000125b  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073a  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b12  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002968  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000543  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d6d  00000000  00000000  00003017  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  64:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
	default: Local_u8ErrorState=NOK; 		  break;
	}
	return Local_u8ErrorState;
}
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_u8SetPinDirection+0x6>
  70:	78 c0       	rjmp	.+240    	; 0x162 <DIO_u8SetPinDirection+0xf6>
  72:	41 11       	cpse	r20, r1
  74:	3c c0       	rjmp	.+120    	; 0xee <DIO_u8SetPinDirection+0x82>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	99 f0       	breq	.+38     	; 0xa0 <DIO_u8SetPinDirection+0x34>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_u8SetPinDirection+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	e9 f0       	breq	.+58     	; 0xba <DIO_u8SetPinDirection+0x4e>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	41 f1       	breq	.+80     	; 0xd4 <DIO_u8SetPinDirection+0x68>
  84:	70 c0       	rjmp	.+224    	; 0x166 <DIO_u8SetPinDirection+0xfa>
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_u8SetPinDirection+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_u8SetPinDirection+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret
  a0:	27 b3       	in	r18, 0x17	; 23
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_u8SetPinDirection+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_u8SetPinDirection+0x3c>
  b0:	80 95       	com	r24
  b2:	82 23       	and	r24, r18
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret
  ba:	24 b3       	in	r18, 0x14	; 20
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_u8SetPinDirection+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_u8SetPinDirection+0x56>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_u8SetPinDirection+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_u8SetPinDirection+0x70>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	e1 f5       	brne	.+120    	; 0x16a <DIO_u8SetPinDirection+0xfe>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <DIO_u8SetPinDirection+0xae>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_u8SetPinDirection+0x96>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <DIO_u8SetPinDirection+0xc6>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <DIO_u8SetPinDirection+0xde>
 100:	36 c0       	rjmp	.+108    	; 0x16e <DIO_u8SetPinDirection+0x102>
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_u8SetPinDirection+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_u8SetPinDirection+0x9e>
 112:	82 2b       	or	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_u8SetPinDirection+0xba>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_u8SetPinDirection+0xb6>
 12a:	82 2b       	or	r24, r18
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_u8SetPinDirection+0xd2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_u8SetPinDirection+0xce>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_u8SetPinDirection+0xea>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_u8SetPinDirection+0xe6>
 15a:	82 2b       	or	r24, r18
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	08 95       	ret
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret

00000172 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
	if(Copy_u8Pin<=DIO_u8PIN7)
 172:	68 30       	cpi	r22, 0x08	; 8
 174:	08 f0       	brcs	.+2      	; 0x178 <DIO_u8SetPinValue+0x6>
 176:	78 c0       	rjmp	.+240    	; 0x268 <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 178:	41 11       	cpse	r20, r1
 17a:	3c c0       	rjmp	.+120    	; 0x1f4 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	99 f0       	breq	.+38     	; 0x1a6 <DIO_u8SetPinValue+0x34>
 180:	28 f0       	brcs	.+10     	; 0x18c <DIO_u8SetPinValue+0x1a>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	e9 f0       	breq	.+58     	; 0x1c0 <DIO_u8SetPinValue+0x4e>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	41 f1       	breq	.+80     	; 0x1da <DIO_u8SetPinValue+0x68>
 18a:	70 c0       	rjmp	.+224    	; 0x26c <DIO_u8SetPinValue+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8SetPinValue+0x26>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8SetPinValue+0x22>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1a4:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_u8SetPinValue+0x40>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_u8SetPinValue+0x3c>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 1be:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 1c0:	25 b3       	in	r18, 0x15	; 21
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_u8SetPinValue+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_u8SetPinValue+0x56>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 1d8:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 1da:	22 b3       	in	r18, 0x12	; 18
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8SetPinValue+0x74>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8SetPinValue+0x70>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 1f2:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	e1 f5       	brne	.+120    	; 0x270 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	91 f0       	breq	.+36     	; 0x220 <DIO_u8SetPinValue+0xae>
 1fc:	28 f0       	brcs	.+10     	; 0x208 <DIO_u8SetPinValue+0x96>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	d9 f0       	breq	.+54     	; 0x238 <DIO_u8SetPinValue+0xc6>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	29 f1       	breq	.+74     	; 0x250 <DIO_u8SetPinValue+0xde>
 206:	36 c0       	rjmp	.+108    	; 0x274 <DIO_u8SetPinValue+0x102>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_u8SetPinValue+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_u8SetPinValue+0x9e>
 218:	82 2b       	or	r24, r18
 21a:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 21e:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 220:	28 b3       	in	r18, 0x18	; 24
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_u8SetPinValue+0xba>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_u8SetPinValue+0xb6>
 230:	82 2b       	or	r24, r18
 232:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 234:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 236:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_u8SetPinValue+0xd2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_u8SetPinValue+0xce>
 248:	82 2b       	or	r24, r18
 24a:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 24e:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 250:	22 b3       	in	r18, 0x12	; 18
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_u8SetPinValue+0xea>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_u8SetPinValue+0xe6>
 260:	82 2b       	or	r24, r18
 262:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 264:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 266:	08 95       	ret
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 274:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
}
 276:	08 95       	ret

00000278 <LED_u8TurnOn>:
****************************************************************/
u8 LED_u8TurnOn(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	u8 Local_u8ErrorState = OK;
#if		LED_CONNECTION == LED_SOURCE_CONNECTION
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8SetPinValue>
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_LOW);

#endif

	return Local_u8ErrorState;	
}
 27e:	08 95       	ret

00000280 <LED_u8TurnOff>:
****************************************************************/
u8 LED_u8TurnOff(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	u8 Local_u8ErrorState = OK;
#if		LED_CONNECTION == LED_SOURCE_CONNECTION
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_LOW);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_u8SetPinValue>
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_HIGH);

#endif

	return Local_u8ErrorState;
}
 286:	08 95       	ret

00000288 <LED_u8Init>:
 parameter 2      :	Copy_u8Pin  -> DIO_u8PIN1 ..	             
 parameter 3      : Copy_u8InitState  -> LED_STATE_ON .. LED_STATE_OFF
 Return           : u8 indication for error		             
****************************************************************/
u8 LED_u8Init(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8InitState)
{
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	c8 2f       	mov	r28, r24
 290:	d6 2f       	mov	r29, r22
 292:	14 2f       	mov	r17, r20
	u8 Local_u8ErrorState = OK;
	
	/* in 2 modes sink or source the pin will be output */
	DIO_u8SetPinDirection(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_OUTPUT);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
	
	switch(Copy_u8InitState)
 29a:	11 23       	and	r17, r17
 29c:	39 f0       	breq	.+14     	; 0x2ac <LED_u8Init+0x24>
 29e:	11 30       	cpi	r17, 0x01	; 1
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <LED_u8Init+0x2e>
	{
		case (LED_STATE_ON)	: Local_u8ErrorState = LED_u8TurnOn(Copy_u8Port, Copy_u8Pin); 	break;
 2a2:	6d 2f       	mov	r22, r29
 2a4:	8c 2f       	mov	r24, r28
 2a6:	0e 94 3c 01 	call	0x278	; 0x278 <LED_u8TurnOn>
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <LED_u8Init+0x30>
		case (LED_STATE_OFF): Local_u8ErrorState = LED_u8TurnOff(Copy_u8Port, Copy_u8Pin); 	break;
 2ac:	6d 2f       	mov	r22, r29
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0e 94 40 01 	call	0x280	; 0x280 <LED_u8TurnOff>
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <LED_u8Init+0x30>
		default				: Local_u8ErrorState = NOK;  											break;			
 2b6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <Led_voidSnakeEffect>:

void Led_voidSnakeEffect()
{
	/* init Leds 0 -> 7 */
	u8 Local_u8Counter = 0;
	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <Led_voidSnakeEffect+0x10>
	{
		LED_u8Init(DIO_u8PORTA,Local_u8Counter,LED_STATE_OFF);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	6c 2f       	mov	r22, r28
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 44 01 	call	0x288	; 0x288 <LED_u8Init>

void Led_voidSnakeEffect()
{
	/* init Leds 0 -> 7 */
	u8 Local_u8Counter = 0;
	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
 2ce:	cf 5f       	subi	r28, 0xFF	; 255
 2d0:	c8 30       	cpi	r28, 0x08	; 8
 2d2:	c0 f3       	brcs	.-16     	; 0x2c4 <Led_voidSnakeEffect+0x4>
	{
		/* use signed to prevent infinite loop */
		s8 Local_u8CounterX = 0;
		s8 Local_u8CounterY = 7;
		
		for(Local_u8CounterX = 0; Local_u8CounterX < 8; Local_u8CounterX++)
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <Led_voidSnakeEffect+0x34>
		{
			LED_u8TurnOn(DIO_u8PORTA,Local_u8CounterX);
 2d8:	6c 2f       	mov	r22, r28
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 3c 01 	call	0x278	; 0x278 <LED_u8TurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	2f e7       	ldi	r18, 0x7F	; 127
 2e2:	8a e1       	ldi	r24, 0x1A	; 26
 2e4:	96 e0       	ldi	r25, 0x06	; 6
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <Led_voidSnakeEffect+0x26>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <Led_voidSnakeEffect+0x30>
 2f0:	00 00       	nop
	{
		/* use signed to prevent infinite loop */
		s8 Local_u8CounterX = 0;
		s8 Local_u8CounterY = 7;
		
		for(Local_u8CounterX = 0; Local_u8CounterX < 8; Local_u8CounterX++)
 2f2:	cf 5f       	subi	r28, 0xFF	; 255
 2f4:	c8 30       	cpi	r28, 0x08	; 8
 2f6:	84 f3       	brlt	.-32     	; 0x2d8 <Led_voidSnakeEffect+0x18>
 2f8:	c7 e0       	ldi	r28, 0x07	; 7
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <Led_voidSnakeEffect+0x58>
			_delay_ms(250);
		}
		
		for(Local_u8CounterY = 7; Local_u8CounterY >= 0; Local_u8CounterY--)
		{
			LED_u8TurnOff(DIO_u8PORTA,Local_u8CounterY);
 2fc:	6c 2f       	mov	r22, r28
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 40 01 	call	0x280	; 0x280 <LED_u8TurnOff>
 304:	2f e7       	ldi	r18, 0x7F	; 127
 306:	8a e1       	ldi	r24, 0x1A	; 26
 308:	96 e0       	ldi	r25, 0x06	; 6
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <Led_voidSnakeEffect+0x4a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Led_voidSnakeEffect+0x54>
 314:	00 00       	nop
		{
			LED_u8TurnOn(DIO_u8PORTA,Local_u8CounterX);
			_delay_ms(250);
		}
		
		for(Local_u8CounterY = 7; Local_u8CounterY >= 0; Local_u8CounterY--)
 316:	c1 50       	subi	r28, 0x01	; 1
 318:	cc 23       	and	r28, r28
 31a:	84 f7       	brge	.-32     	; 0x2fc <Led_voidSnakeEffect+0x3c>
 31c:	db cf       	rjmp	.-74     	; 0x2d4 <Led_voidSnakeEffect+0x14>

0000031e <main>:
void Led_voidDivergingConverging();
void Led_voidSnakeEffect();

int main(void)
{
	Led_voidSnakeEffect();
 31e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Led_voidSnakeEffect>

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>


GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004e0  00000554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d4  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000534  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad5  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 97 01 	call	0x32e	; 0x32e <main>
  7a:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
	if(Copy_u8Pin<=DIO_u8PIN7)
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinDirection+0x6>
  86:	78 c0       	rjmp	.+240    	; 0x178 <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  88:	41 11       	cpse	r20, r1
  8a:	3c c0       	rjmp	.+120    	; 0x104 <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	99 f0       	breq	.+38     	; 0xb6 <DIO_u8SetPinDirection+0x34>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_u8SetPinDirection+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	e9 f0       	breq	.+58     	; 0xd0 <DIO_u8SetPinDirection+0x4e>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	41 f1       	breq	.+80     	; 0xea <DIO_u8SetPinDirection+0x68>
  9a:	70 c0       	rjmp	.+224    	; 0x17c <DIO_u8SetPinDirection+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_u8SetPinDirection+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_u8SetPinDirection+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
  b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  b4:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
  b6:	27 b3       	in	r18, 0x17	; 23
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_u8SetPinDirection+0x40>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_u8SetPinDirection+0x3c>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
  cc:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
  ce:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
  d0:	24 b3       	in	r18, 0x14	; 20
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_u8SetPinDirection+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_u8SetPinDirection+0x56>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
  e6:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
  e8:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
  ea:	21 b3       	in	r18, 0x11	; 17
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_u8SetPinDirection+0x74>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_u8SetPinDirection+0x70>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 100:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 102:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	e1 f5       	brne	.+120    	; 0x180 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 f0       	breq	.+36     	; 0x130 <DIO_u8SetPinDirection+0xae>
 10c:	28 f0       	brcs	.+10     	; 0x118 <DIO_u8SetPinDirection+0x96>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	d9 f0       	breq	.+54     	; 0x148 <DIO_u8SetPinDirection+0xc6>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	29 f1       	breq	.+74     	; 0x160 <DIO_u8SetPinDirection+0xde>
 116:	36 c0       	rjmp	.+108    	; 0x184 <DIO_u8SetPinDirection+0x102>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_u8SetPinDirection+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_u8SetPinDirection+0x9e>
 128:	82 2b       	or	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 12e:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_u8SetPinDirection+0xba>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_u8SetPinDirection+0xb6>
 140:	82 2b       	or	r24, r18
 142:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 144:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 146:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinDirection+0xd2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinDirection+0xce>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 15c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 15e:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinDirection+0xea>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinDirection+0xe6>
 170:	82 2b       	or	r24, r18
 172:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 174:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 176:	08 95       	ret
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 184:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
}
 186:	08 95       	ret

00000188 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;

	switch(Copy_u8Port)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	49 f0       	breq	.+18     	; 0x19e <DIO_u8SetPortDirection+0x16>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_u8SetPortDirection+0x10>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	49 f0       	breq	.+18     	; 0x1a4 <DIO_u8SetPortDirection+0x1c>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	51 f0       	breq	.+20     	; 0x1aa <DIO_u8SetPortDirection+0x22>
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <DIO_u8SetPortDirection+0x28>
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
 198:	6a bb       	out	0x1a, r22	; 26
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 19a:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
 19c:	08 95       	ret
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
 19e:	67 bb       	out	0x17, r22	; 23
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
 1a2:	08 95       	ret
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
 1a4:	64 bb       	out	0x14, r22	; 20
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
 1a8:	08 95       	ret
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
 1aa:	61 bb       	out	0x11, r22	; 17
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
 1ae:	08 95       	ret
	default: Local_u8ErrorState=NOK; 		  break;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 1b2:	08 95       	ret

000001b4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
	if(Copy_u8Pin<=DIO_u8PIN7)
 1b4:	68 30       	cpi	r22, 0x08	; 8
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <DIO_u8SetPinValue+0x6>
 1b8:	78 c0       	rjmp	.+240    	; 0x2aa <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 1ba:	41 11       	cpse	r20, r1
 1bc:	3c c0       	rjmp	.+120    	; 0x236 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <DIO_u8SetPinValue+0x34>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_u8SetPinValue+0x1a>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	e9 f0       	breq	.+58     	; 0x202 <DIO_u8SetPinValue+0x4e>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	41 f1       	breq	.+80     	; 0x21c <DIO_u8SetPinValue+0x68>
 1cc:	70 c0       	rjmp	.+224    	; 0x2ae <DIO_u8SetPinValue+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8SetPinValue+0x26>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8SetPinValue+0x22>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1e6:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_u8SetPinValue+0x40>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_u8SetPinValue+0x3c>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 200:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 202:	25 b3       	in	r18, 0x15	; 21
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_u8SetPinValue+0x5a>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_u8SetPinValue+0x56>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 218:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 21a:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 21c:	22 b3       	in	r18, 0x12	; 18
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8SetPinValue+0x74>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8SetPinValue+0x70>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 234:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	e1 f5       	brne	.+120    	; 0x2b2 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	91 f0       	breq	.+36     	; 0x262 <DIO_u8SetPinValue+0xae>
 23e:	28 f0       	brcs	.+10     	; 0x24a <DIO_u8SetPinValue+0x96>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	d9 f0       	breq	.+54     	; 0x27a <DIO_u8SetPinValue+0xc6>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	29 f1       	breq	.+74     	; 0x292 <DIO_u8SetPinValue+0xde>
 248:	36 c0       	rjmp	.+108    	; 0x2b6 <DIO_u8SetPinValue+0x102>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_u8SetPinValue+0xa2>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_u8SetPinValue+0x9e>
 25a:	82 2b       	or	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 260:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinValue+0xba>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_u8SetPinValue+0xb6>
 272:	82 2b       	or	r24, r18
 274:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 278:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 27a:	25 b3       	in	r18, 0x15	; 21
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinValue+0xd2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPinValue+0xce>
 28a:	82 2b       	or	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 290:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 292:	22 b3       	in	r18, 0x12	; 18
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_u8SetPinValue+0xea>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_u8SetPinValue+0xe6>
 2a2:	82 2b       	or	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 2a8:	08 95       	ret
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
}
 2b8:	08 95       	ret

000002ba <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
	switch(Copy_u8Port)
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	49 f0       	breq	.+18     	; 0x2d0 <DIO_u8SetPortValue+0x16>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <DIO_u8SetPortValue+0x10>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <DIO_u8SetPortValue+0x1c>
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	51 f0       	breq	.+20     	; 0x2dc <DIO_u8SetPortValue+0x22>
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <DIO_u8SetPortValue+0x28>
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
 2ca:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
 2ce:	08 95       	ret
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
 2d0:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
 2d4:	08 95       	ret
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
 2d6:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
 2da:	08 95       	ret
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
 2dc:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 2de:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
 2e0:	08 95       	ret
	default: Local_u8ErrorState=NOK; 	   break;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 2e4:	08 95       	ret

000002e6 <LED_u8TurnOn>:
****************************************************************/
u8 LED_u8TurnOn(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	u8 Local_u8ErrorState = OK;
#if		LED_CONNECTION == LED_SOURCE_CONNECTION
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_HIGH);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8SetPinValue>
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_LOW);

#endif

	return Local_u8ErrorState;	
}
 2ec:	08 95       	ret

000002ee <LED_u8TurnOff>:
****************************************************************/
u8 LED_u8TurnOff(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	u8 Local_u8ErrorState = OK;
#if		LED_CONNECTION == LED_SOURCE_CONNECTION
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_LOW);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8SetPinValue>
	Local_u8ErrorState = DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_HIGH);

#endif

	return Local_u8ErrorState;
}
 2f4:	08 95       	ret

000002f6 <LED_u8Init>:
 parameter 2      :	Copy_u8Pin  -> DIO_u8PIN1 ..	             
 parameter 3      : Copy_u8InitState  -> LED_STATE_ON .. LED_STATE_OFF
 Return           : u8 indication for error		             
****************************************************************/
u8 LED_u8Init(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8InitState)
{
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	c8 2f       	mov	r28, r24
 2fe:	d6 2f       	mov	r29, r22
 300:	14 2f       	mov	r17, r20
	u8 Local_u8ErrorState = OK;
	
	/* in 2 modes sink or source the pin will be output */
	DIO_u8SetPinDirection(Copy_u8Port,Copy_u8Pin,DIO_u8PIN_OUTPUT);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
	
	switch(Copy_u8InitState)
 308:	11 23       	and	r17, r17
 30a:	39 f0       	breq	.+14     	; 0x31a <LED_u8Init+0x24>
 30c:	11 30       	cpi	r17, 0x01	; 1
 30e:	51 f4       	brne	.+20     	; 0x324 <LED_u8Init+0x2e>
	{
		case (LED_STATE_ON)	: Local_u8ErrorState = LED_u8TurnOn(Copy_u8Port, Copy_u8Pin); 	break;
 310:	6d 2f       	mov	r22, r29
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LED_u8TurnOn>
 318:	06 c0       	rjmp	.+12     	; 0x326 <LED_u8Init+0x30>
		case (LED_STATE_OFF): Local_u8ErrorState = LED_u8TurnOff(Copy_u8Port, Copy_u8Pin); 	break;
 31a:	6d 2f       	mov	r22, r29
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_u8TurnOff>
 322:	01 c0       	rjmp	.+2      	; 0x326 <LED_u8Init+0x30>
		default				: Local_u8ErrorState = NOK;  									break;			
 324:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <main>:
#include "led_interface.h"
#include "util/delay.h"

int main(void)
{
    SevenSegment_u8Init(DIO_u8PORTA,SEVEN_SEGMENT_COMMON_CATHODE,SEG_NUMBER_0);
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SevenSegment_u8Init>
	SevenSegment_u8Init(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,SEG_NUMBER_0);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SevenSegment_u8Init>
	
	LED_u8Init(DIO_u8PORTC,DIO_u8PIN0,LED_STATE_OFF);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_u8Init>
	LED_u8Init(DIO_u8PORTC,DIO_u8PIN1,LED_STATE_OFF);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_u8Init>
	LED_u8Init(DIO_u8PORTC,DIO_u8PIN2,LED_STATE_OFF);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_u8Init>
	
	u8 Local_u8Counter = 0;
	u8 Local_u8Flag = 0;
    while (1) 
    {
		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN2);
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LED_u8TurnOn>
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_u8TurnOff>
		
		for (Local_u8Counter = 0; Local_u8Counter <= 15; Local_u8Counter++)
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	22 c0       	rjmp	.+68     	; 0x3b8 <main+0x8a>
		{
			SevenSegment_u8DisplayNumber(DIO_u8PORTA,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter % 10);
 374:	cd ec       	ldi	r28, 0xCD	; 205
 376:	dc 9f       	mul	r29, r28
 378:	c1 2d       	mov	r28, r1
 37a:	11 24       	eor	r1, r1
 37c:	c6 95       	lsr	r28
 37e:	c6 95       	lsr	r28
 380:	c6 95       	lsr	r28
 382:	9c 2f       	mov	r25, r28
 384:	99 0f       	add	r25, r25
 386:	89 2f       	mov	r24, r25
 388:	88 0f       	add	r24, r24
 38a:	88 0f       	add	r24, r24
 38c:	89 0f       	add	r24, r25
 38e:	4d 2f       	mov	r20, r29
 390:	48 1b       	sub	r20, r24
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
			SevenSegment_u8DisplayNumber(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter / 10);
 39a:	4c 2f       	mov	r20, r28
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	84 e3       	ldi	r24, 0x34	; 52
 3a8:	9c e0       	ldi	r25, 0x0C	; 12
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x7c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x86>
 3b4:	00 00       	nop
    while (1) 
    {
		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN2);
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN0);
		
		for (Local_u8Counter = 0; Local_u8Counter <= 15; Local_u8Counter++)
 3b6:	df 5f       	subi	r29, 0xFF	; 255
 3b8:	d0 31       	cpi	r29, 0x10	; 16
 3ba:	e0 f2       	brcs	.-72     	; 0x374 <main+0x46>
			SevenSegment_u8DisplayNumber(DIO_u8PORTA,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter % 10);
			SevenSegment_u8DisplayNumber(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter / 10);
			_delay_ms(500);
		}
		
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN2);
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_u8TurnOff>
		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LED_u8TurnOn>
		for (Local_u8Counter = 0; Local_u8Counter <= 5; Local_u8Counter++)
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	22 c0       	rjmp	.+68     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			SevenSegment_u8DisplayNumber(DIO_u8PORTA,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter % 10);
 3d0:	cd ec       	ldi	r28, 0xCD	; 205
 3d2:	dc 9f       	mul	r29, r28
 3d4:	c1 2d       	mov	r28, r1
 3d6:	11 24       	eor	r1, r1
 3d8:	c6 95       	lsr	r28
 3da:	c6 95       	lsr	r28
 3dc:	c6 95       	lsr	r28
 3de:	9c 2f       	mov	r25, r28
 3e0:	99 0f       	add	r25, r25
 3e2:	89 2f       	mov	r24, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	88 0f       	add	r24, r24
 3e8:	89 0f       	add	r24, r25
 3ea:	4d 2f       	mov	r20, r29
 3ec:	48 1b       	sub	r20, r24
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
			SevenSegment_u8DisplayNumber(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter / 10);
 3f6:	4c 2f       	mov	r20, r28
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	84 e3       	ldi	r24, 0x34	; 52
 404:	9c e0       	ldi	r25, 0x0C	; 12
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
			_delay_ms(500);
		}
		
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN2);
		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN1);
		for (Local_u8Counter = 0; Local_u8Counter <= 5; Local_u8Counter++)
 412:	df 5f       	subi	r29, 0xFF	; 255
 414:	d6 30       	cpi	r29, 0x06	; 6
 416:	e0 f2       	brcs	.-72     	; 0x3d0 <main+0xa2>
			SevenSegment_u8DisplayNumber(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter / 10);
			_delay_ms(500);
		}
		

		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LED_u8TurnOn>
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN1);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 77 01 	call	0x2ee	; 0x2ee <LED_u8TurnOff>
		for (Local_u8Counter = 0; Local_u8Counter <= 15; Local_u8Counter++)
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	22 c0       	rjmp	.+68     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		{
			SevenSegment_u8DisplayNumber(DIO_u8PORTA,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter % 10);
 42c:	cd ec       	ldi	r28, 0xCD	; 205
 42e:	dc 9f       	mul	r29, r28
 430:	c1 2d       	mov	r28, r1
 432:	11 24       	eor	r1, r1
 434:	c6 95       	lsr	r28
 436:	c6 95       	lsr	r28
 438:	c6 95       	lsr	r28
 43a:	9c 2f       	mov	r25, r28
 43c:	99 0f       	add	r25, r25
 43e:	89 2f       	mov	r24, r25
 440:	88 0f       	add	r24, r24
 442:	88 0f       	add	r24, r24
 444:	89 0f       	add	r24, r25
 446:	4d 2f       	mov	r20, r29
 448:	48 1b       	sub	r20, r24
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
			SevenSegment_u8DisplayNumber(DIO_u8PORTB,SEVEN_SEGMENT_COMMON_CATHODE,Local_u8Counter / 10);
 452:	4c 2f       	mov	r20, r28
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	84 e3       	ldi	r24, 0x34	; 52
 460:	9c e0       	ldi	r25, 0x0C	; 12
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
		}
		

		LED_u8TurnOn(DIO_u8PORTC,DIO_u8PIN0);
		LED_u8TurnOff(DIO_u8PORTC,DIO_u8PIN1);
		for (Local_u8Counter = 0; Local_u8Counter <= 15; Local_u8Counter++)
 46e:	df 5f       	subi	r29, 0xFF	; 255
 470:	d0 31       	cpi	r29, 0x10	; 16
 472:	e0 f2       	brcs	.-72     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 474:	75 cf       	rjmp	.-278    	; 0x360 <main+0x32>

00000476 <SevenSegment_u8DisplayNumber>:
u8 SevenSegment_u8DisplayNumber(u8 Copy_u8Port,u8 Copy_u8Type,u8 Copy_u8Number)
{
	u8 Local_u8ErrorState = OK;
	
	/* check if number > 9*/
	if(Copy_u8Number > 9)
 476:	4a 30       	cpi	r20, 0x0A	; 10
 478:	b8 f4       	brcc	.+46     	; 0x4a8 <SevenSegment_u8DisplayNumber+0x32>
		/* return error */
		Local_u8ErrorState = NOK;
	}
	else
	{
		switch(Copy_u8Type)
 47a:	66 23       	and	r22, r22
 47c:	59 f0       	breq	.+22     	; 0x494 <SevenSegment_u8DisplayNumber+0x1e>
 47e:	61 30       	cpi	r22, 0x01	; 1
 480:	a9 f4       	brne	.+42     	; 0x4ac <SevenSegment_u8DisplayNumber+0x36>
		{
			case(SEVEN_SEGMENT_COMMON_CATHODE): DIO_u8SetPortValue(Copy_u8Port,Local_u8Numbers[Copy_u8Number]);  break;
 482:	e4 2f       	mov	r30, r20
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e0 5a       	subi	r30, 0xA0	; 160
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	60 81       	ld	r22, Z
 48c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8SetPortValue>
                        ..etc
 Return           : u8 indication for error		             
****************************************************************/
u8 SevenSegment_u8DisplayNumber(u8 Copy_u8Port,u8 Copy_u8Type,u8 Copy_u8Number)
{
	u8 Local_u8ErrorState = OK;
 490:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		switch(Copy_u8Type)
		{
			case(SEVEN_SEGMENT_COMMON_CATHODE): DIO_u8SetPortValue(Copy_u8Port,Local_u8Numbers[Copy_u8Number]);  break;
 492:	08 95       	ret
			case(SEVEN_SEGMENT_COMMON_ANODE)  : DIO_u8SetPortValue(Copy_u8Port,~Local_u8Numbers[Copy_u8Number]); break;
 494:	e4 2f       	mov	r30, r20
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	e0 5a       	subi	r30, 0xA0	; 160
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	60 81       	ld	r22, Z
 49e:	60 95       	com	r22
 4a0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8SetPortValue>
                        ..etc
 Return           : u8 indication for error		             
****************************************************************/
u8 SevenSegment_u8DisplayNumber(u8 Copy_u8Port,u8 Copy_u8Type,u8 Copy_u8Number)
{
	u8 Local_u8ErrorState = OK;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		switch(Copy_u8Type)
		{
			case(SEVEN_SEGMENT_COMMON_CATHODE): DIO_u8SetPortValue(Copy_u8Port,Local_u8Numbers[Copy_u8Number]);  break;
			case(SEVEN_SEGMENT_COMMON_ANODE)  : DIO_u8SetPortValue(Copy_u8Port,~Local_u8Numbers[Copy_u8Number]); break;
 4a6:	08 95       	ret
	
	/* check if number > 9*/
	if(Copy_u8Number > 9)
	{
		/* return error */
		Local_u8ErrorState = NOK;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	08 95       	ret
	{
		switch(Copy_u8Type)
		{
			case(SEVEN_SEGMENT_COMMON_CATHODE): DIO_u8SetPortValue(Copy_u8Port,Local_u8Numbers[Copy_u8Number]);  break;
			case(SEVEN_SEGMENT_COMMON_ANODE)  : DIO_u8SetPortValue(Copy_u8Port,~Local_u8Numbers[Copy_u8Number]); break;
			default							  : /* error */ Local_u8ErrorState = NOK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return Local_u8ErrorState;
 4ae:	08 95       	ret

000004b0 <SevenSegment_u8Init>:
                        SEG_NUMBER_1
                        ..etc
 Return           : u8 indication for error		             
****************************************************************/
u8 SevenSegment_u8Init(u8 Copy_u8Port,u8 Copy_u8Type,u8 Copy_u8InitNumber)
{
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	c8 2f       	mov	r28, r24
 4b8:	d6 2f       	mov	r29, r22
 4ba:	14 2f       	mov	r17, r20
	u8 Local_u8ErrorState = OK;

	/* init port as output */
	Local_u8ErrorState = DIO_u8SetPortDirection(Copy_u8Port,DIO_u8PORT_OUTPUT);
 4bc:	6f ef       	ldi	r22, 0xFF	; 255
 4be:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPortDirection>

	if(Local_u8ErrorState == OK)
 4c2:	81 11       	cpse	r24, r1
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <SevenSegment_u8Init+0x22>
	{
		Local_u8ErrorState = SevenSegment_u8DisplayNumber(Copy_u8Port, Copy_u8Type, Copy_u8InitNumber);
 4c6:	41 2f       	mov	r20, r17
 4c8:	6d 2f       	mov	r22, r29
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 3b 02 	call	0x476	; 0x476 <SevenSegment_u8DisplayNumber>
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <SevenSegment_u8Init+0x24>
	}
	else
	{
		/* error */
		Local_u8ErrorState = NOK;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return Local_u8ErrorState;
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>

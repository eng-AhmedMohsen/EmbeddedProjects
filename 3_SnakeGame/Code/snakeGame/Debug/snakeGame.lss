
snakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000047c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fbe  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000895  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000979  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005da  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009dd  00000000  00000000  00002f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 15 02 	call	0x42a	; 0x42a <main>
  7a:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_u8SendPulse>:
	while(Copy_pchString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pchString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  8c:	8f e9       	ldi	r24, 0x9F	; 159
  8e:	9f e0       	ldi	r25, 0x0F	; 15
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <CLCD_u8SendPulse+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <CLCD_u8SendPulse+0x14>
  96:	00 00       	nop
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret

000000a6 <CLCD_voidSendCommand>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  be:	6c 2f       	mov	r22, r28
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_u8SetPortValue>
  c6:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_u8SendPulse>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <CLCD_voidSendData>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPinValue>
  e8:	6c 2f       	mov	r22, r28
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_u8SetPortValue>
  f0:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_u8SendPulse>
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <CLCD_voidInit>:
  f8:	6f ef       	ldi	r22, 0xFF	; 255
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_u8SetPortDirection>
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_u8SetPinDirection>
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_u8SetPinDirection>
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_u8SetPinDirection>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <CLCD_voidInit+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <CLCD_voidInit+0x36>
 12e:	00 00       	nop
 130:	8c e3       	ldi	r24, 0x3C	; 60
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
 148:	08 95       	ret

0000014a <CLCD_voidGotoXY>:

void CLCD_voidGotoXY(u8 Copy_u8Row, u8 Copy_u8Col)
{
	if(Copy_u8Row == 0)
 14a:	81 11       	cpse	r24, r1
 14c:	05 c0       	rjmp	.+10     	; 0x158 <CLCD_voidGotoXY+0xe>
	{
		CLCD_voidSendCommand(Copy_u8Col + 128);
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	86 0f       	add	r24, r22
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
 156:	06 c0       	rjmp	.+12     	; 0x164 <CLCD_voidGotoXY+0x1a>
	}
	else if(Copy_u8Row == 1)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	21 f4       	brne	.+8      	; 0x164 <CLCD_voidGotoXY+0x1a>
	{
		CLCD_voidSendCommand(Copy_u8Col + 0x40 + 128);
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	86 0f       	add	r24, r22
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <CLCD_voidGotoXY+0x1e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <CLCD_voidGotoXY+0x24>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <CLCD_voidWriteSpecialCharacter>:
	}
	_delay_ms(1);
}

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	8c 01       	movw	r16, r24
 180:	d6 2f       	mov	r29, r22
 182:	f4 2e       	mov	r15, r20
 184:	e2 2e       	mov	r14, r18
	u8 Local_u8CGRamAddress,Local_u8Counter;

	/*1- calculate CGRAM address knowing that every pattern consumes 8 bytes*/
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;
 186:	86 2f       	mov	r24, r22
 188:	88 0f       	add	r24, r24
 18a:	88 0f       	add	r24, r24
 18c:	88 0f       	add	r24, r24

	/*2-Send SET CGRAM address command to LCD with setting bit6 ,clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
 18e:	80 5c       	subi	r24, 0xC0	; 192
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>

	/*3- write the pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <CLCD_voidWriteSpecialCharacter+0x34>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendData>

	/*2-Send SET CGRAM address command to LCD with setting bit6 ,clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);

	/*3- write the pattern into CGRAM*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	c8 30       	cpi	r28, 0x08	; 8
 1a8:	b8 f3       	brcs	.-18     	; 0x198 <CLCD_voidWriteSpecialCharacter+0x26>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	/*4- Back to the DDRAM to display the special pattern*/
	CLCD_voidGotoXY(Copy_u8XPos,Copy_u8YPos);
 1aa:	6e 2d       	mov	r22, r14
 1ac:	8f 2d       	mov	r24, r15
 1ae:	0e 94 a5 00 	call	0x14a	; 0x14a <CLCD_voidGotoXY>

	/*5- Display the special pattern*/
	CLCD_voidSendData(Copy_u8PatternNumber);
 1b2:	8d 2f       	mov	r24, r29
 1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendData>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	08 95       	ret

000001c6 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
	if(Copy_u8Pin<=DIO_u8PIN7)
 1c6:	68 30       	cpi	r22, 0x08	; 8
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <DIO_u8SetPinDirection+0x6>
 1ca:	78 c0       	rjmp	.+240    	; 0x2bc <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
 1cc:	41 11       	cpse	r20, r1
 1ce:	3c c0       	rjmp	.+120    	; 0x248 <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	99 f0       	breq	.+38     	; 0x1fa <DIO_u8SetPinDirection+0x34>
 1d4:	28 f0       	brcs	.+10     	; 0x1e0 <DIO_u8SetPinDirection+0x1a>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	e9 f0       	breq	.+58     	; 0x214 <DIO_u8SetPinDirection+0x4e>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	41 f1       	breq	.+80     	; 0x22e <DIO_u8SetPinDirection+0x68>
 1de:	70 c0       	rjmp	.+224    	; 0x2c0 <DIO_u8SetPinDirection+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 1e0:	2a b3       	in	r18, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinDirection+0x26>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinDirection+0x22>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 1f8:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 1fa:	27 b3       	in	r18, 0x17	; 23
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_u8SetPinDirection+0x40>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_u8SetPinDirection+0x3c>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 210:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 212:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 214:	24 b3       	in	r18, 0x14	; 20
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinDirection+0x5a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinDirection+0x56>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 22c:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0x74>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0x70>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 246:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	e1 f5       	brne	.+120    	; 0x2c4 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 f0       	breq	.+36     	; 0x274 <DIO_u8SetPinDirection+0xae>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_u8SetPinDirection+0x96>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_u8SetPinDirection+0xc6>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	29 f1       	breq	.+74     	; 0x2a4 <DIO_u8SetPinDirection+0xde>
 25a:	36 c0       	rjmp	.+108    	; 0x2c8 <DIO_u8SetPinDirection+0x102>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 25c:	2a b3       	in	r18, 0x1a	; 26
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_u8SetPinDirection+0xa2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_u8SetPinDirection+0x9e>
 26c:	82 2b       	or	r24, r18
 26e:	8a bb       	out	0x1a, r24	; 26
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 270:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 272:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 274:	27 b3       	in	r18, 0x17	; 23
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_u8SetPinDirection+0xba>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_u8SetPinDirection+0xb6>
 284:	82 2b       	or	r24, r18
 286:	87 bb       	out	0x17, r24	; 23
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 288:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 28a:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 28c:	24 b3       	in	r18, 0x14	; 20
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_u8SetPinDirection+0xd2>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_u8SetPinDirection+0xce>
 29c:	82 2b       	or	r24, r18
 29e:	84 bb       	out	0x14, r24	; 20
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 2a2:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 2a4:	21 b3       	in	r18, 0x11	; 17
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_u8SetPinDirection+0xea>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_u8SetPinDirection+0xe6>
 2b4:	82 2b       	or	r24, r18
 2b6:	81 bb       	out	0x11, r24	; 17
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 2ba:	08 95       	ret
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
}
 2ca:	08 95       	ret

000002cc <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;

	switch(Copy_u8Port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	49 f0       	breq	.+18     	; 0x2e2 <DIO_u8SetPortDirection+0x16>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_u8SetPortDirection+0x10>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	49 f0       	breq	.+18     	; 0x2e8 <DIO_u8SetPortDirection+0x1c>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	51 f0       	breq	.+20     	; 0x2ee <DIO_u8SetPortDirection+0x22>
 2da:	0c c0       	rjmp	.+24     	; 0x2f4 <DIO_u8SetPortDirection+0x28>
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
 2dc:	6a bb       	out	0x1a, r22	; 26
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2de:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
 2e0:	08 95       	ret
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
 2e2:	67 bb       	out	0x17, r22	; 23
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2e4:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
 2e6:	08 95       	ret
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
 2e8:	64 bb       	out	0x14, r22	; 20
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
 2ec:	08 95       	ret
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
 2ee:	61 bb       	out	0x11, r22	; 17
}


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState= OK;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
 2f2:	08 95       	ret
	default: Local_u8ErrorState=NOK; 		  break;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 2f6:	08 95       	ret

000002f8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
	if(Copy_u8Pin<=DIO_u8PIN7)
 2f8:	68 30       	cpi	r22, 0x08	; 8
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <DIO_u8SetPinValue+0x6>
 2fc:	78 c0       	rjmp	.+240    	; 0x3ee <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 2fe:	41 11       	cpse	r20, r1
 300:	3c c0       	rjmp	.+120    	; 0x37a <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	99 f0       	breq	.+38     	; 0x32c <DIO_u8SetPinValue+0x34>
 306:	28 f0       	brcs	.+10     	; 0x312 <DIO_u8SetPinValue+0x1a>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	e9 f0       	breq	.+58     	; 0x346 <DIO_u8SetPinValue+0x4e>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	41 f1       	breq	.+80     	; 0x360 <DIO_u8SetPinValue+0x68>
 310:	70 c0       	rjmp	.+224    	; 0x3f2 <DIO_u8SetPinValue+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 312:	2b b3       	in	r18, 0x1b	; 27
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPinValue+0x26>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_u8SetPinValue+0x22>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 328:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 32a:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 32c:	28 b3       	in	r18, 0x18	; 24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_u8SetPinValue+0x40>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_u8SetPinValue+0x3c>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 344:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 346:	25 b3       	in	r18, 0x15	; 21
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_u8SetPinValue+0x5a>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_u8SetPinValue+0x56>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 35e:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 360:	22 b3       	in	r18, 0x12	; 18
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8SetPinValue+0x74>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8SetPinValue+0x70>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 378:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	e1 f5       	brne	.+120    	; 0x3f6 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	91 f0       	breq	.+36     	; 0x3a6 <DIO_u8SetPinValue+0xae>
 382:	28 f0       	brcs	.+10     	; 0x38e <DIO_u8SetPinValue+0x96>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	d9 f0       	breq	.+54     	; 0x3be <DIO_u8SetPinValue+0xc6>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	29 f1       	breq	.+74     	; 0x3d6 <DIO_u8SetPinValue+0xde>
 38c:	36 c0       	rjmp	.+108    	; 0x3fa <DIO_u8SetPinValue+0x102>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 38e:	2b b3       	in	r18, 0x1b	; 27
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8SetPinValue+0xa2>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8SetPinValue+0x9e>
 39e:	82 2b       	or	r24, r18
 3a0:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3a4:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 3a6:	28 b3       	in	r18, 0x18	; 24
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8SetPinValue+0xba>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8SetPinValue+0xb6>
 3b6:	82 2b       	or	r24, r18
 3b8:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 3bc:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 3be:	25 b3       	in	r18, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_u8SetPinValue+0xd2>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_u8SetPinValue+0xce>
 3ce:	82 2b       	or	r24, r18
 3d0:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 3d4:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 3d6:	22 b3       	in	r18, 0x12	; 18
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8SetPinValue+0xea>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8SetPinValue+0xe6>
 3e6:	82 2b       	or	r24, r18
 3e8:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 3ea:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 3ec:	08 95       	ret
			Local_u8ErrorState=NOK;
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret
			default: Local_u8ErrorState=NOK; 			break;
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=NOK; 			break;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
}
 3fc:	08 95       	ret

000003fe <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
	switch(Copy_u8Port)
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	49 f0       	breq	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 402:	28 f0       	brcs	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	49 f0       	breq	.+18     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	51 f0       	breq	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40c:	0c c0       	rjmp	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
 40e:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 410:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
 412:	08 95       	ret
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
 414:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
 418:	08 95       	ret
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
 41a:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 41c:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
 41e:	08 95       	ret
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
 420:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState= OK;
 422:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
 424:	08 95       	ret
	default: Local_u8ErrorState=NOK; 	   break;
 426:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 428:	08 95       	ret

0000042a <main>:
	0B00000	
};
int main(void)
{
	/* Game Init */
	snakeGame_voidInit();
 42a:	0e 94 39 02 	call	0x472	; 0x472 <snakeGame_voidInit>
	
	
	
	CLCD_voidWriteSpecialCharacter(Local_u8SnakeHead,0,0,0);
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	80 e6       	ldi	r24, 0x60	; 96
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 b9 00 	call	0x172	; 0x172 <CLCD_voidWriteSpecialCharacter>
	//CLCD_voidSendCommand(0x1C);
	
    while (1) 
    {
	
		for(int i = 0; i < 20; i++)
 43c:	c0 e0       	ldi	r28, 0x00	; 0
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	14 c0       	rjmp	.+40     	; 0x46a <main+0x40>
		{
			CLCD_voidSendCommand(0x01);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 53 00 	call	0xa6	; 0xa6 <CLCD_voidSendCommand>
			CLCD_voidGotoXY(0,i);
 448:	6c 2f       	mov	r22, r28
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 a5 00 	call	0x14a	; 0x14a <CLCD_voidGotoXY>
			
			CLCD_voidSendData(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendData>
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	84 e3       	ldi	r24, 0x34	; 52
 45a:	9c e0       	ldi	r25, 0x0C	; 12
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <main+0x32>
 464:	00 c0       	rjmp	.+0      	; 0x466 <main+0x3c>
 466:	00 00       	nop
	//CLCD_voidSendCommand(0x1C);
	
    while (1) 
    {
	
		for(int i = 0; i < 20; i++)
 468:	21 96       	adiw	r28, 0x01	; 1
 46a:	c4 31       	cpi	r28, 0x14	; 20
 46c:	d1 05       	cpc	r29, r1
 46e:	4c f3       	brlt	.-46     	; 0x442 <main+0x18>
 470:	e5 cf       	rjmp	.-54     	; 0x43c <main+0x12>

00000472 <snakeGame_voidInit>:
#include "snakeGame.h"

void snakeGame_voidInit()
{
	/* init LCD */
	CLCD_voidInit();
 472:	0e 94 7c 00 	call	0xf8	; 0xf8 <CLCD_voidInit>
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
